name: Rust

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  RUSTFLAGS: -A warnings

jobs:
  test:
    name: Test on ${{ matrix.os }} using Rust ${{ matrix.rust }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [nightly]

    steps:
    # - uses: hecrj/setup-rust-action@v2
    #   with:
    #     rust-version: ${{ matrix.rust }}
    #     targets: ${{ matrix.target }}
    #     components: 'rustfmt, clippy'

    - uses: actions/checkout@v4

    # - name: Install LLVM
    #   if: matrix.os == 'windows-latest'
    #   run: choco upgrade llvm -y

    # - name: Set clang path
    #   if: matrix.os =='windows-latest'
    #   run: echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $GITHUB_ENV
    #   shell: bash

    - name: msvc c roaring 14 37
      if: matrix.os == 'windows-latest'
      run: |
        $env:INCLUDE="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\include;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\atlmfc\include;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\cppwinrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\shared;"
        $env:LIB="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\atlmfc\lib\x64;C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\ucrt\x64;C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\um\x64;"
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\bin\HostX64\x64\cl.exe" -nologo -MD -O2 -Brepro /Ob2 /Fe:roaring_fast_or.exe /Zi /DEBUG /D NDEBUG /GS /fp:precise /Zc:inline /Gd /TC /D _WINDOWS /D WIN32 ./roaring_fast_or.c
        echo "running with MSVC 14.37.32822 cl.exe"
        ./roaring_fast_or.exe
        echo "$LASTEXITCODE"
      continue-on-error: true

    - name: msvc c roaring 14 38
      if: matrix.os == 'windows-latest'
      run: |
        $env:INCLUDE="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\include;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\atlmfc\include;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\um;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\cppwinrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\winrt;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\shared;"
        $env:LIB="C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\atlmfc\lib\x64;C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\ucrt\x64;C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\um\x64;"
        & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\bin\HostX64\x64\cl.exe" -nologo -MD -O2 -Brepro /Ob2 /Fe:roaring_fast_or.exe /Zi /DEBUG /D NDEBUG /GS /fp:precise /Zc:inline /Gd /TC /D _WINDOWS /D WIN32 ./roaring_fast_or.c
        echo "running with MSVC 14.38.33130 cl.exe"
        ./roaring_fast_or.exe
        echo "$LASTEXITCODE"
      continue-on-error: true

    - name: cmake msvc roaring
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build && cmake -G "Visual Studio 17 2022" -A x64 .. && cmake --build . --config RelWithDebInfo --verbose
        echo "running"
        RelWithDebInfo/roaring_fast_or.exe
        echo "$LASTEXITCODE"
      continue-on-error: true

      # - name: Cargo fmt
    #   run: cargo +${{ matrix.rust }} fmt --all -- --check
    #   if: matrix.os == 'ubuntu-latest' && matrix.rust == 'nightly'

    # - name: Cargo clippy
    #   run: cargo +${{ matrix.rust }} clippy --all-targets --workspace
    #   if: matrix.os == 'ubuntu-latest' && matrix.rust == 'nightly'

    # - name: Build
    #   run: cargo +${{ matrix.rust }} build

    # - name: Test
    #   run: cargo +${{ matrix.rust }} test

    # - name: Benchmark
    #   if: matrix.rust == 'nightly'
    #   run: cargo +${{ matrix.rust }} bench -- 'or/fast'
    #   continue-on-error: true

    - name: Archive artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: built artifacts
        path: |
          **/roaring_fast_or*
        # target/release/*.exe

    # - name: Minimal versions
    #   if: matrix.rust == 'nightly'
    #   run: cargo +${{ matrix.rust }} -Zdirect-minimal-versions test
